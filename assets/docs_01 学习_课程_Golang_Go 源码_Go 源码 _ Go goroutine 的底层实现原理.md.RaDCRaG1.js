import{_ as a,c as n,o as s,a4 as p}from"./chunks/framework.4aTu-Nia.js";const m=JSON.parse('{"title":"一、基本概念","description":"","frontmatter":{},"headers":[],"relativePath":"docs/01 学习/课程/Golang/Go 源码/Go 源码 | Go goroutine 的底层实现原理.md","filePath":"docs/01 学习/课程/Golang/Go 源码/Go 源码 | Go goroutine 的底层实现原理.md"}'),t={name:"docs/01 学习/课程/Golang/Go 源码/Go 源码 | Go goroutine 的底层实现原理.md"},e=p(`<h1 id="一、基本概念" tabindex="-1">一、基本概念 <a class="header-anchor" href="#一、基本概念" aria-label="Permalink to &quot;一、基本概念&quot;">​</a></h1><p>Goroutine 可以理解为一种 Go 语言的协程（轻量级线程），是 Go 支持高并发的基础，属于用户态的线程，由 Go runtime 管理而不是操作系统。</p><h1 id="二、底层数据结构" tabindex="-1">二、底层数据结构 <a class="header-anchor" href="#二、底层数据结构" aria-label="Permalink to &quot;二、底层数据结构&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type g struct {</span></span>
<span class="line"><span>	goid 	int64 // 唯一的goroutine的ID</span></span>
<span class="line"><span>	sched gobuf // goroutine切换时，用于保存g的上下文</span></span>
<span class="line"><span>	stack stack // 栈</span></span>
<span class="line"><span>  gopc        // pc of go statement that created this goroutine</span></span>
<span class="line"><span>	startpc    uintptr // pc of goroutine function</span></span>
<span class="line"><span>	...</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>type gobuf struct {</span></span>
<span class="line"><span>	sp   uintptr // 栈指针位置</span></span>
<span class="line"><span>	pc   uintptr // 运行到的程序位置</span></span>
<span class="line"><span>	g    guintptr // 指向 goroutine</span></span>
<span class="line"><span>	ret  uintptr  // 保存系统调用的返回值</span></span>
<span class="line"><span>	...</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>type stack struct {</span></span>
<span class="line"><span>	lo uintptr // 栈的下界内存地址</span></span>
<span class="line"><span>	hi uintptr // 栈的上界内存地址</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>最终有一个 runtime.g 对象放入调度队列</p><p><img src="https://static.xiaobot.net/file/2023-08-19/263968/08cae890c48fa9ce9ff8065a63333b8c.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/caijinlin/imgcdn/5.2.goroutine_state.jpg#id=ssLk4&amp;originHeight=251&amp;originWidth=403&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h2 id="一-创建" tabindex="-1">一）创建 <a class="header-anchor" href="#一-创建" aria-label="Permalink to &quot;一）创建&quot;">​</a></h2><p>通过 go 关键字调用底层函数 runtime.newproc() 创建一个 goroutine</p><p>当调用该函数之后，goroutine 会被设置成 runnable 状态</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>func main() {</span></span>
<span class="line"><span> go func() {</span></span>
<span class="line"><span>  fmt.Println(&quot;func routine&quot;)</span></span>
<span class="line"><span> }()</span></span>
<span class="line"><span> fmt.Println(&quot;main goroutine&quot;)</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>创建好的这个 goroutine 会新建一个自己的栈空间，同时在 G 的 sched 中维护栈地址与程序计数器这些信息。</p><p>每个 G 在被创建之后，都会被优先放入到本地队列中，如果本地队列已经满了，就会被放入到全局队列中。</p><h2 id="二-运行" tabindex="-1">二） 运行 <a class="header-anchor" href="#二-运行" aria-label="Permalink to &quot;二） 运行&quot;">​</a></h2><p>goroutine 本身只是一个数据结构，真正让 goroutine 运行起来的是<strong>调度器</strong>。Go 实现了一个用户态的调度器（GMP 模型），这个调度器充分利用现代计算机的多核特性，同时让多个 goroutine 运行，同时 goroutine 设计的很轻量级，调度和上下文切换的代价都比较小。</p><p><img src="https://cdn.jsdelivr.net/gh/caijinlin/imgcdn/image-20220406201146142.png#id=x0ptN&amp;originHeight=283&amp;originWidth=618&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h2 id="三-调度时机" tabindex="-1">三）调度时机 <a class="header-anchor" href="#三-调度时机" aria-label="Permalink to &quot;三）调度时机&quot;">​</a></h2><p>1、新起一个协程和协程执行完毕</p><p>2、会阻塞的系统调用，比如文件 io、网络 io</p><p>3、channel、mutex 等阻塞操作</p><p>4、time.sleep</p><p>5、垃圾回收之后</p><p>6、主动调用 runtime.Gosched()</p><p>7、运行过久或系统调用过久等等</p><p>每个 M 开始执行 P 的本地队列中的 G 时，goroutine 会被设置成 running 状态</p><p>如果某个 M 把本地队列中的 G 都执行完成之后，然后就会去全局队列中拿 G，这里需要注意，每次去全局队列拿 G 的时候，都需要上锁，避免同样的任务被多次拿。</p><p>如果全局队列都被拿完了，而当前 M 也没有更多的 G 可以执行的时候，它就会去其他 P 的本地队列中拿任务，这个机制被称之为 work stealing 机制，每次会拿走一半的任务，向下取整，比如另一个 P 中有 3 个任务，那一半就是一个任务。</p><p>当全局队列为空，M 也没办法从其他的 P 中拿任务的时候，就会让自身进入自选状态，等待有新的 G 进来。最多只会有 GOMAXPROCS 个 M 在自旋状态，过多 M 的自旋会浪费 CPU 资源。</p><h2 id="四-阻塞" tabindex="-1">四）阻塞 <a class="header-anchor" href="#四-阻塞" aria-label="Permalink to &quot;四）阻塞&quot;">​</a></h2><p>channel 的读写操作、等待锁、等待网络数据、系统调用等都有可能发生阻塞，会调用底层函数 runtime.gopark()，会让出 CPU 时间片，让调度器安排其它等待的任务运行，并在下次某个时候从该位置恢复执行。</p><p>当调用该函数之后，goroutine 会被设置成 waiting 状态</p><h2 id="五-唤醒" tabindex="-1">五）唤醒 <a class="header-anchor" href="#五-唤醒" aria-label="Permalink to &quot;五）唤醒&quot;">​</a></h2><p>处于 waiting 状态的 goroutine，在调用 runtime.goready() 函数之后会被唤醒，唤醒的 goroutine 会被重新放到 M 对应的上下文 P 对应的 runqueue 中，等待被调度。</p><p>当调用该函数之后，goroutine 会被设置成 runnable 状态</p><h2 id="六-退出" tabindex="-1">六）退出 <a class="header-anchor" href="#六-退出" aria-label="Permalink to &quot;六）退出&quot;">​</a></h2><p>当 goroutine 执行完成后，会调用底层函数 runtime.Goexit()</p><p>当调用该函数之后，goroutine 会被设置成 dead 状态</p>`,37),i=[e];function o(l,r,c,u,g,h){return s(),n("div",null,i)}const _=a(t,[["render",o]]);export{m as __pageData,_ as default};
