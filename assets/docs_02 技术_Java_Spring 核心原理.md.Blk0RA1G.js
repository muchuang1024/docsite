import{_ as a,c as n,o as e,a4 as t}from"./chunks/framework.4aTu-Nia.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/02 技术/Java/Spring 核心原理.md","filePath":"docs/02 技术/Java/Spring 核心原理.md"}'),r={name:"docs/02 技术/Java/Spring 核心原理.md"},o=t('<h2 id="基本原理" tabindex="-1">基本原理 <a class="header-anchor" href="#基本原理" aria-label="Permalink to &quot;基本原理&quot;">​</a></h2><p>🔍 <strong>反射解析</strong>：通过反射机制，解析类及其信息，包括构造器、方法及其参数，属性。 📦 <strong>封装信息</strong>：将这些信息封装成bean定义信息类、constructor信息类、method信息类、property信息类。 🗺️ <strong>存储在Map中</strong>：最终，这些信息被存储在一个Map里，即所谓的container或池。</p><h2 id="配置文件与项目启动" tabindex="-1">配置文件与项目启动 <a class="header-anchor" href="#配置文件与项目启动" aria-label="Permalink to &quot;配置文件与项目启动&quot;">​</a></h2><p>📄 <strong>配置文件</strong>：框架根据你的配置文件，找到要scan的包。 🔍 <strong>类解析</strong>：解析包内所有类，寻找含有@bean、@service等注解的类。</p><h2 id="bean的创建与使用" tabindex="-1">Bean的创建与使用 <a class="header-anchor" href="#bean的创建与使用" aria-label="Permalink to &quot;Bean的创建与使用&quot;">​</a></h2><p>🔄 <strong>控制反转</strong>：当你需要一个bean时，框架从container中查找类定义，并利用构造器创建对象。 🔗 <strong>依赖注入</strong>：框架查找要注入的属性或方法，如@autowired注解的属性，然后从container中找到对应的对象，并通过setter方法注入。</p><h2 id="异常处理与bean的作用域" tabindex="-1">异常处理与Bean的作用域 <a class="header-anchor" href="#异常处理与bean的作用域" aria-label="Permalink to &quot;异常处理与Bean的作用域&quot;">​</a></h2><p>🚫 <strong>异常处理</strong>：如果container中找不到某个类定义，会抛出异常，如Spring的无法wire异常。 📦 <strong>嵌套Bean</strong>：嵌套bean使用递归处理，container存储在servletcontext中，避免多次解析。 🔒 <strong>Singleton作用域</strong>：如果是singleton，bean会被重用，存储在map中。 🗝️ <strong>Session作用域</strong>：如果是session，bean存储在session中。</p>',8),s=[o];function i(c,_,d,g,p,l){return e(),n("div",null,s)}const m=a(r,[["render",i]]);export{b as __pageData,m as default};
