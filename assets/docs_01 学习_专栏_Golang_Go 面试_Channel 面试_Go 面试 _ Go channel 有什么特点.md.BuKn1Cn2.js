import{_ as t,c as n,o as e,a4 as a}from"./chunks/framework.4aTu-Nia.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/01 学习/专栏/Golang/Go 面试/Channel 面试/Go 面试 | Go channel 有什么特点.md","filePath":"docs/01 学习/专栏/Golang/Go 面试/Channel 面试/Go 面试 | Go channel 有什么特点.md"}'),d={name:"docs/01 学习/专栏/Golang/Go 面试/Channel 面试/Go 面试 | Go channel 有什么特点.md"},o=a("<p>1、channel 有 2 种类型：无缓冲、有缓冲</p><p>2、channel 有 3 种模式：写操作模式（单向通道）、读操作模式（单向通道）、读写操作模式（双向通道）</p><table><thead><tr><th></th><th>写操作模式</th><th>读操作模式</th><th>读写操作模式</th></tr></thead><tbody><tr><td>创建</td><td>make(chan&lt;- int)</td><td>make(&lt;-chan int)</td><td>make(chan int)</td></tr></tbody></table><p>3、channel 有 3 种状态：未初始化、正常、关闭</p><table><thead><tr><th></th><th>未初始化</th><th>关闭</th><th>正常</th></tr></thead><tbody><tr><td>关闭</td><td>panic</td><td>panic</td><td>正常关闭</td></tr><tr><td>发送</td><td>永远阻塞导致死锁</td><td>panic</td><td>阻塞或者成功发送</td></tr><tr><td>接收</td><td>永远阻塞导致死锁</td><td>缓冲区为空则为零值, 否则可以继续读</td><td>阻塞或者成功接收</td></tr></tbody></table><p>4、注意点</p><p>一个 channel 不能多次关闭，会导致 painc</p><p>如果多个 goroutine 都监听同一个 channel，那么 channel 上的数据都可能随机被某一个 goroutine 取走进行消费</p><p>如果多个 goroutine 监听同一个 channel，如果这个 channel 被关闭，则所有 goroutine 都能收到退出信号</p>",9),h=[o];function c(_,r,l,p,i,s){return e(),n("div",null,h)}const u=t(d,[["render",c]]);export{m as __pageData,u as default};
