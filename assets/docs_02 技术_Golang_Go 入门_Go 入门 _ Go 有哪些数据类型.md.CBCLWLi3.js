import{_ as o,c as e,o as c,a4 as t}from"./chunks/framework.4aTu-Nia.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/02 技术/Golang/Go 入门/Go 入门 | Go 有哪些数据类型.md","filePath":"docs/02 技术/Golang/Go 入门/Go 入门 | Go 有哪些数据类型.md"}'),d={name:"docs/02 技术/Golang/Go 入门/Go 入门 | Go 有哪些数据类型.md"},l=t('<p>Go 语言提供了多种数据类型，这些类型可以分为以下几类：</p><h3 id="基本类型" tabindex="-1">基本类型 <a class="header-anchor" href="#基本类型" aria-label="Permalink to &quot;基本类型&quot;">​</a></h3><p>1、<strong>布尔型（Boolean）</strong>:</p><ul><li><code>bool</code>: 表示真或假的值，例如 <code>true</code> 或 <code>false</code>。</li></ul><p>2、<strong>字符串（String）</strong>:</p><ul><li><code>string</code>: 用于表示文本数据，例如 <code>&quot;hello world&quot;</code>。</li></ul><p>3、<strong>整型（Integer）</strong>:</p><ul><li><code>int</code>, <code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code>: 用于表示整数，不同的类型根据大小和符号有所区别。</li><li><code>uint</code>, <code>uint8</code>, <code>uint16</code>, <code>uint32</code>, <code>uint64</code>, <code>uintptr</code>: 无符号整数类型，代表非负整数。</li></ul><p>4、<strong>浮点型（Floating Point）</strong>:</p><ul><li><code>float32</code>, <code>float64</code>: 用于表示小数，如 <code>3.14</code>。<code>float64</code> 有更大的精度。</li></ul><p>5、<strong>复数类型（Complex Number）</strong>:</p><ul><li><code>complex64</code>, <code>complex128</code>: 用于表示复数，其中包含实部和虚部。</li></ul><h3 id="复合类型" tabindex="-1">复合类型 <a class="header-anchor" href="#复合类型" aria-label="Permalink to &quot;复合类型&quot;">​</a></h3><p>6、<strong>数组（Array）</strong>:</p><ul><li><code>[N]T</code>: 固定大小的元素序列，其中 <code>N</code> 表示元素数量，<code>T</code> 表示元素类型。</li></ul><p>7、<strong>切片（Slice）</strong>:</p><ul><li><code>[]T</code>: 可变大小的序列，更加灵活和常用，<code>T</code> 是元素类型。</li></ul><p>8、<strong>映射（Map）</strong>:</p><ul><li><code>map[K]V</code>: 一种键值对的集合，<code>K</code> 是键的类型，<code>V</code> 是值的类型。</li></ul><p>9、<strong>结构体（Struct）</strong>:</p><ul><li><code>struct</code>: 用于定义包含多个不同类型字段的复合数据类型。</li></ul><p>10、<strong>指针（Pointer）</strong>:</p><ul><li><code>*T</code>: 存储了值 <code>T</code> 类型的内存地址。</li></ul><p>11、<strong>函数（Function）</strong>:</p><ul><li><code>func</code>: 表示函数类型，可以赋值给变量或作为参数传递。</li></ul><h3 id="特殊类型" tabindex="-1">特殊类型 <a class="header-anchor" href="#特殊类型" aria-label="Permalink to &quot;特殊类型&quot;">​</a></h3><p>12、<strong>通道（Channel）</strong>: - <code>chan T</code>: 用于在 goroutines 之间传递数据的通道，<code>T</code> 表示通道中传递的数据类型。</p><p>13、<strong>接口（Interface）</strong>: - <code>interface{}</code>: 表示任何类型的值，常用于实现多态和抽象。</p>',28),n=[l];function r(a,i,s,u,p,_){return c(),e("div",null,n)}const f=o(d,[["render",r]]);export{h as __pageData,f as default};
