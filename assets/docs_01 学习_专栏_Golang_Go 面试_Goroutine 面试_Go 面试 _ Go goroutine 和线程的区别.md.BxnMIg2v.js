import{_ as t,c as o,o as e,a4 as r}from"./chunks/framework.4aTu-Nia.js";const G=JSON.parse('{"title":"goroutine 对比 栈空间","description":"","frontmatter":{},"headers":[],"relativePath":"docs/01 学习/专栏/Golang/Go 面试/Goroutine 面试/Go 面试 | Go goroutine 和线程的区别.md","filePath":"docs/01 学习/专栏/Golang/Go 面试/Goroutine 面试/Go 面试 | Go goroutine 和线程的区别.md"}'),d={name:"docs/01 学习/专栏/Golang/Go 面试/Goroutine 面试/Go 面试 | Go goroutine 和线程的区别.md"},n=r('<h1 id="goroutine-对比-栈空间" tabindex="-1">goroutine 对比 栈空间 <a class="header-anchor" href="#goroutine-对比-栈空间" aria-label="Permalink to &quot;goroutine 对比 栈空间&quot;">​</a></h1><table><thead><tr><th>特性</th><th>goroutine</th><th>线程</th></tr></thead><tbody><tr><td>内存占用</td><td>创建一个 goroutine 的内存消耗为 2 KB</td><td>创建一个线程的栈的默认消耗为 1 MB</td></tr><tr><td>创建和销毁</td><td>goroutine 因为是由 Go runtime 负责管理的，创建和销毁的消耗非常小，是用户级。</td><td>线程创建和销毀都会有巨大的消耗，因为要和操作系统打交道，是内核级的，通常解决的办法就是线程池</td></tr><tr><td>切换操作</td><td>goroutines 切换只需保存和恢复寄存器：PC、SP、BP</td><td>当线程切换时，需要保存各种寄存器，以便恢复现场。</td></tr><tr><td>切换耗时</td><td>goroutine 切换约为 200 ns，相当于 2400-3600 条指令。</td><td>线程切换会消耗为 1.5-2.0 μs，相当于 12000-18000 条指令。</td></tr></tbody></table>',2),a=[n];function _(i,s,u,c,h,g){return e(),o("div",null,a)}const m=t(d,[["render",_]]);export{G as __pageData,m as default};
