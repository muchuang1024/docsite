import{_ as a,c as s,o as i,a4 as l}from"./chunks/framework.4aTu-Nia.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/02 技术/Java/第一个 Java HelloWorld 程序.md","filePath":"docs/02 技术/Java/第一个 Java HelloWorld 程序.md"}'),e={name:"docs/02 技术/Java/第一个 Java HelloWorld 程序.md"},o=l(`<h2 id="一、编写代码" tabindex="-1">一、编写代码 <a class="header-anchor" href="#一、编写代码" aria-label="Permalink to &quot;一、编写代码&quot;">​</a></h2><p>创建文件名 HelloWorld.java，编写代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol><li><code>public class HelloWorld {</code>：这是一个Java类的开始定义。<code>public</code> 表示这个类是公开的，可以从其他类访问。<code>HelloWorld</code> 是类的名称，需要和文件名保持一致。</li><li><code>public static void main(String[] args) {</code>：这是Java程序的入口点。每个Java程序都需要一个<code>main</code> 方法，它是程序的起点。<code>public</code> 表示这个方法是公开的，<code>static</code> 表示它属于类而不是类的实例，<code>void</code> 表示这个方法不返回任何值。<code>main</code> 方法接受一个参数，即一个字符串数组 <code>String[] args</code>，通常用来传递命令行参数。</li><li><code>System.out.println(&quot;Hello, World!&quot;);</code>：这是 <code>main</code> 方法的主体。它使用 <code>System.out.println</code> 方法打印 &quot;Hello, World!&quot; 到控制台。<code>System.out</code> 是一个标准输出流，<code>println</code> 是一个方法，用于打印字符串并在末尾添加一个换行符。</li><li><code>}</code>：这是结束 <code>main</code> 方法的大括号。</li><li><code>}</code>：这是结束 <code>HelloWorld</code> 类的大括号。</li></ol><h2 id="二、编译和运行" tabindex="-1">二、编译和运行 <a class="header-anchor" href="#二、编译和运行" aria-label="Permalink to &quot;二、编译和运行&quot;">​</a></h2><h3 id="运行-java-程序-命令行" tabindex="-1">运行 Java 程序 - 命令行 <a class="header-anchor" href="#运行-java-程序-命令行" aria-label="Permalink to &quot;运行 Java 程序 - 命令行&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 编译生成 HelloWorld.class 文件</span></span>
<span class="line"><span>javac HelloWorld.java</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 执行 HelloWorld.class 文件</span></span>
<span class="line"><span>java HelloWorld</span></span></code></pre></div><h3 id="运行-java-程序-vscode" tabindex="-1">运行 Java 程序 - VSCode <a class="header-anchor" href="#运行-java-程序-vscode" aria-label="Permalink to &quot;运行 Java 程序 - VSCode&quot;">​</a></h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12455685/1696991428460-2382f0b4-fb4b-4217-8c35-9df83e1b3973.png#averageHue=%23283237&amp;clientId=ud26488cf-8e21-4&amp;from=paste&amp;height=197&amp;id=ub710da95&amp;originHeight=197&amp;originWidth=687&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=28588&amp;status=done&amp;style=none&amp;taskId=u42ed3ed6-522b-4e13-a669-5b99592bdce&amp;title=&amp;width=687" alt="image.png"></p><h2 id="三、常见错误" tabindex="-1">三、常见错误 <a class="header-anchor" href="#三、常见错误" aria-label="Permalink to &quot;三、常见错误&quot;">​</a></h2><ol><li><strong>文件名和类名不匹配</strong>：</li></ol><ul><li>确保您的Java文件名与类名完全一致，包括大小写。在您的代码示例中，文件名应该是<code>HelloWorld.java</code>，并且类名也应该是<code>HelloWorld</code>，确保没有拼写错误。</li></ul><ol start="2"><li><strong>缺少Java类声明</strong>：</li></ol><ul><li>检查您的Java代码是否包含一个类声明，例如 <code>public class HelloWorld</code>。确保类声明的括号正确地打开和关闭，并且类主体在花括号内。</li></ul><ol start="3"><li><strong>未正确结束语句</strong>：</li></ol><ul><li>确保每一行语句都以分号结束，如 <code>System.out.println(&quot;Hello, World!&quot;);</code>。</li></ul>`,16),t=[o];function n(d,p,c,r,h,k){return i(),s("div",null,t)}const m=a(e,[["render",n]]);export{g as __pageData,m as default};
