import{_ as o,c as e,o as t,m as n}from"./chunks/framework.4aTu-Nia.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/01 学习/专栏/Golang/Go 面试/Channel 面试/Go 面试 | Go channel 为什么是线程安全的.md","filePath":"docs/01 学习/专栏/Golang/Go 面试/Channel 面试/Go 面试 | Go channel 为什么是线程安全的.md"}'),_={name:"docs/01 学习/专栏/Golang/Go 面试/Channel 面试/Go 面试 | Go channel 为什么是线程安全的.md"},a=n("p",null,[n("strong",null,"1、为什么设计成线程安全？")],-1),l=n("p",null,"不同协程通过 channel 进行通信，本身的使用场景就是多线程，为了保证数据的一致性，必须实现线程安全",-1),s=n("p",null,[n("strong",null,"2、如何实现线程安全的？")],-1),c=n("p",null,"channel 的底层实现中，hchan 结构体中采用 Mutex 锁来保证数据读写安全。在对循环数组 buf 中的数据进行入队和出队操作时，必须先获取互斥锁，才能操作 channel 数据",-1),h=[a,l,s,c];function r(d,i,p,G,u,m){return t(),e("div",null,h)}const x=o(_,[["render",r]]);export{g as __pageData,x as default};
