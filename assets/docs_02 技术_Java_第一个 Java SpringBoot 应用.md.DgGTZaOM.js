import{_ as a,c as i,o as s,a4 as p}from"./chunks/framework.4aTu-Nia.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/02 技术/Java/第一个 Java SpringBoot 应用.md","filePath":"docs/02 技术/Java/第一个 Java SpringBoot 应用.md"}'),n={name:"docs/02 技术/Java/第一个 Java SpringBoot 应用.md"},t=p(`<h2 id="一、初始化项目" tabindex="-1">一、初始化项目 <a class="header-anchor" href="#一、初始化项目" aria-label="Permalink to &quot;一、初始化项目&quot;">​</a></h2><p>使用官方项目模版初始化，选择依赖构建方式、SpringBoot 版本、JDK 版本、依赖，然后导出到本地</p><p>参考：<a href="https://start.spring.io/" target="_blank" rel="noreferrer">https://start.spring.io/</a></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12455685/1697019557146-9f695d94-92c0-4feb-824a-3ad2d87de41f.png#averageHue=%23fbf3f0&amp;clientId=u8c8a7d53-1f90-4&amp;from=paste&amp;height=720&amp;id=u347cd019&amp;originHeight=720&amp;originWidth=1517&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=182582&amp;status=done&amp;style=none&amp;taskId=u6771e26d-2f30-4c9c-9247-d80486d2742&amp;title=&amp;width=1517" alt="image.png"></p><h2 id="二、编写代码" tabindex="-1">二、编写代码 <a class="header-anchor" href="#二、编写代码" aria-label="Permalink to &quot;二、编写代码&quot;">​</a></h2><p>在 IDE 中打开项目，然后在 src/main/java/com/example/demo 文件夹中找到 DemoApplication.java 该文件，将下面代码复制到该文件中</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.example.demo;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.boot.SpringApplication;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.boot.autoconfigure.SpringBootApplication;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.web.bind.annotation.GetMapping;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.web.bind.annotation.RequestParam;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.web.bind.annotation.RestController;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RestController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DemoApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      SpringApplication.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DemoApplication.class, args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">defaultValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello %s!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>注释 @RestController 告诉 Spring 此代码描述了一个 Web 站点。它 @GetMapping(“/hello”) 告诉 Spring 使用我们的 hello() 方法来回答发送到该 <code>localhost:8080/hello</code> 地址的请求。</p><p>参考：<a href="https://spring.io/quickstart" target="_blank" rel="noreferrer">https://spring.io/quickstart</a></p><h2 id="三、编译和运行" tabindex="-1">三、编译和运行 <a class="header-anchor" href="#三、编译和运行" aria-label="Permalink to &quot;三、编译和运行&quot;">​</a></h2><p>通过 gradle 构建项目</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>./gradlew bootRun</span></span></code></pre></div><p>输出以下类似内容，则代表构建成功</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12455685/1697020570628-8de145ea-2eb4-4c07-b9b0-54382616c962.png#averageHue=%23495358&amp;clientId=u85eeb2b3-54ea-4&amp;from=paste&amp;height=402&amp;id=u90d629bc&amp;originHeight=402&amp;originWidth=1484&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=106254&amp;status=done&amp;style=none&amp;taskId=u7c2412d6-6886-49f0-ba71-e2234c98bf9&amp;title=&amp;width=1484" alt="image.png"></p><p>Spring Boot 嵌入 Apache Tomcat 服务器充当 Web 服务器，并监听端口 8080 上的 localhost 请求打开浏览器，然后在顶部的地址栏中输入 <code>localhost:8080/hello</code> ，看到以下输出，则代表访问成功</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hello World</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span></span></code></pre></div><h2 id="四、注意事项" tabindex="-1">四、注意事项 <a class="header-anchor" href="#四、注意事项" aria-label="Permalink to &quot;四、注意事项&quot;">​</a></h2><p>SpringBoot 版本 需要 JDK 版本 保持一致，如果是不兼容的版本，编译无法通过</p><p>在官网 <a href="https://spring.io/projects/spring-boot#learn" target="_blank" rel="noreferrer">https://spring.io/projects/spring-boot#learn</a> 查看 springBoot 版本列表 <img src="https://cdn.nlark.com/yuque/0/2023/png/12455685/1697018664698-0b1b63e4-cd77-434a-995a-a355e303d1fd.png#averageHue=%23f9f8f8&amp;clientId=u70bd9791-95a0-4&amp;from=paste&amp;height=704&amp;id=u43489497&amp;originHeight=704&amp;originWidth=1012&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=85896&amp;status=done&amp;style=none&amp;taskId=uba8be256-8528-4255-9606-f82dc53a4ce&amp;title=&amp;width=1012" alt="image.png"></p><p>点击具体版本，查看 <code>System Requirements</code> 可以看到每个 springBoot 版本兼容的 JDK 版本</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12455685/1697018298450-fe404294-2d49-43f4-8a83-5f393373620a.png#averageHue=%23fefaf9&amp;clientId=u70bd9791-95a0-4&amp;from=paste&amp;height=284&amp;id=ucbd99ac1&amp;originHeight=284&amp;originWidth=1042&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=42270&amp;status=done&amp;style=none&amp;taskId=u5d9b502d-39a6-4a94-abc2-6aaae5f6f84&amp;title=&amp;width=1042" alt="image.png"></p>`,21),e=[t];function l(h,r,o,k,d,g){return s(),i("div",null,e)}const E=a(n,[["render",l]]);export{m as __pageData,E as default};
