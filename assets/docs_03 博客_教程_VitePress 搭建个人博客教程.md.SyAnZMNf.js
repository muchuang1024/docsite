import{_ as s,c as a,o as i,a4 as n}from"./chunks/framework.4aTu-Nia.js";const E=JSON.parse('{"title":"三、自动更新","description":"","frontmatter":{},"headers":[],"relativePath":"docs/03 博客/教程/VitePress 搭建个人博客教程.md","filePath":"docs/03 博客/教程/VitePress 搭建个人博客教程.md"}'),p={name:"docs/03 博客/教程/VitePress 搭建个人博客教程.md"},e=n(`<p><strong>自媒体平台那么多，为什么还要搭建自己的博客？</strong></p><p>1）在自媒体平台上，你受限于平台的规则和算法，而在博客上，你可以自由地表达自己的想法，不受任何限制</p><p>2）搜索引擎优化：博客通常更容易被搜索引擎收录，通过优化关键词和内容，可以吸引更多的流量</p><p>3）建立个人品牌：博客是建立和展示个人专业形象和品牌的理想场所。通过持续发布高质量的内容，你可以成为某个领域的意见领袖，吸引一群忠实的读者</p><p><strong>为什么选择 VitePress ？</strong></p><p>1）不用一直折腾，专心写作。从最早用的 WordPress、Hexo、掘金等，每次都会有新的平台出来，耗费太多精力</p><p>2）内容基于 Markdown 编写。自己用 Markdown 写的笔记，就可以生成博客</p><p>3）生成的静态文件可以托管在 Github 上，无须购买域名，即可使用 Github 分配的网址进行访问</p><p>VitePress 是一款<a href="https://en.wikipedia.org/wiki/Static_site_generator" target="_blank" rel="noreferrer">静态站点生成器</a> (SSG) ，专为构建快速、以内容为中心的网站而设计。简而言之，VitePress 获取用 <a href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="noreferrer">Markdown</a> 编写的源内容，为其应用主题，并生成可以轻松部署在任何地方的静态 HTML 页面。</p><p>本文将介绍通过 VitePress 基于 Markdown 笔记文档生成博客，并部署到 Github 上，以及笔记发生变化时，自动更新博客</p><p>最终的效果如下：<a href="https://muchuang1024.github.io/" target="_blank" rel="noreferrer">https://muchuang1024.github.io/</a></p><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20240517215656.png" alt=""></p><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20240517215743.png" alt=""></p><h2 id="一、创建笔记仓库" tabindex="-1">一、创建笔记仓库 <a class="header-anchor" href="#一、创建笔记仓库" aria-label="Permalink to &quot;一、创建笔记仓库&quot;">​</a></h2><p>为了笔记文档和博客网站分开管理，所以需要单独在创建一个笔记仓库 docs</p><p>建议托管在 Github 上面，方便后面的自动更新</p><h3 id="_1、拉取到本地" tabindex="-1">1、拉取到本地 <a class="header-anchor" href="#_1、拉取到本地" aria-label="Permalink to &quot;1、拉取到本地&quot;">​</a></h3><p>在 Github 创建好仓库后，拉取到本地</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:username/docs.git</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 拉取到本地</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 进入目录</span></span></code></pre></div><h3 id="_2、添加笔记文档" tabindex="-1">2、添加笔记文档 <a class="header-anchor" href="#_2、添加笔记文档" aria-label="Permalink to &quot;2、添加笔记文档&quot;">​</a></h3><p>可以使用 Obsidian 软件管理 Markdown 笔记文档，然后使用 Git 提交</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 添加笔记文档</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ADD 提交&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 提交到本地仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 提交到远程仓库</span></span></code></pre></div><h2 id="二、创建博客仓库" tabindex="-1">二、创建博客仓库 <a class="header-anchor" href="#二、创建博客仓库" aria-label="Permalink to &quot;二、创建博客仓库&quot;">​</a></h2><p>在 Github 创建好博客仓库 username.github.io，拉取到本地</p><h3 id="_1、拉取到本地-1" tabindex="-1">1、拉取到本地 <a class="header-anchor" href="#_1、拉取到本地-1" aria-label="Permalink to &quot;1、拉取到本地&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git clone git@github.com:username/username.github.io.git</span></span>
<span class="line"><span>cd username.github.io # 进入目录</span></span></code></pre></div><h3 id="_2、安装-vitepress-依赖" tabindex="-1">2、安装 VitePress 依赖 <a class="header-anchor" href="#_2、安装-vitepress-依赖" aria-label="Permalink to &quot;2、安装 VitePress 依赖&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>yarn add -D vitepress</span></span></code></pre></div><h3 id="_3、构建项目" tabindex="-1">3、构建项目 <a class="header-anchor" href="#_3、构建项目" aria-label="Permalink to &quot;3、构建项目&quot;">​</a></h3><p>VitePress 附带一个脚手架，可帮助您构建基本项目</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npx vitepress init</span></span></code></pre></div><p>输入相应设置，自动生成相关代码</p><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20240329214827.png" alt=""></p><h3 id="_4、添加笔记文档" tabindex="-1">4、添加笔记文档 <a class="header-anchor" href="#_4、添加笔记文档" aria-label="Permalink to &quot;4、添加笔记文档&quot;">​</a></h3><p>在博客仓库添加子项目：笔记文档仓库 docs</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 添加笔记文档仓库作为子项目</span></span>
<span class="line"><span>git submodule add -f git@github.com:username/docs.git docs</span></span>
<span class="line"><span># 拉取到本地</span></span>
<span class="line"><span>git submodule update --init --recursive</span></span></code></pre></div><h3 id="_5、项目目录结构" tabindex="-1">5、项目目录结构 <a class="header-anchor" href="#_5、项目目录结构" aria-label="Permalink to &quot;5、项目目录结构&quot;">​</a></h3><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20240517231848.png" alt=""></p><p>各个文件含义</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.vitepress： VitePress 配置</span></span>
<span class="line"><span>docs:  笔记仓库</span></span>
<span class="line"><span>index.md: 首页</span></span>
<span class="line"><span>node_modules: 安装的依赖</span></span>
<span class="line"><span>package.json：依赖管理</span></span>
<span class="line"><span>package-lock.json：安装依赖的版本</span></span></code></pre></div><p>配置文件 ( <code>.vitepress/config.mts</code>) 允许自定义 VitePress 站点的各个配置</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitepress&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// https://vitepress.dev/reference/site-config</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;木川博客&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  description: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;个人笔记&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  srcDir: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 存放文档的路径（index.md 的父目录），VitePress 会基于这个目录来编译和生成静态网站；如果配置为 ., 则是对应的项目根目录，scDir 下 必须要有一个 index.md，配置主页布局</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  themeConfig: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // https://vitepress.dev/reference/default-theme-config</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nav: [ </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 首页右上角导航栏</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Home&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        link: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 链接路径，这个路径应该是相对于 \`srcDir\` 的。比如 \`/docs/test\` 指向的是 \`scDir/docs/test.md\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Examples&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        link: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/docs/markdown-examples&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 指向笔记库的文档路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sidebar: [ </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 详情页侧边栏</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Examples&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        items: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Markdown Examples&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            link: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/docs/markdown-examples&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 指向笔记库的文档路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Runtime API Examples&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            link: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/docs/api-examples&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    socialLinks: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        icon: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;github&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        link: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://github.com/vuejs/vitepress&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="_6、自动生成侧边栏" tabindex="-1">6、自动生成侧边栏 <a class="header-anchor" href="#_6、自动生成侧边栏" aria-label="Permalink to &quot;6、自动生成侧边栏&quot;">​</a></h3><p>侧边栏默认通过 sidebar 字段配置</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sidebar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Examples&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    items: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Markdown Examples&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, link: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/markdown-examples&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Runtime API Examples&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, link: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api-examples&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>如果文章很多，都需要手动配置，很耗费时间，并且修改后还需要手动同步。所以推荐安装插件，自动配置侧边栏</p><p>安装侧边栏插件</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite-plugin-vitepress-auto-sidebar</span></span></code></pre></div><p>在 <code>.vitepress/config.mts</code> 文件中使用插件，将会根据文章目录生成侧边栏</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AutoSidebar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite-plugin-vitepress-auto-sidebar&#39;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vite: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      AutoSidebar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        collapsed: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ignoreList: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.obsidian&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.git&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node_modules&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="_7、本地运行" tabindex="-1">7、本地运行 <a class="header-anchor" href="#_7、本地运行" aria-label="Permalink to &quot;7、本地运行&quot;">​</a></h3><p>通过 执行 dev 命令，可以在本地预览</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>yarn docs:dev</span></span></code></pre></div><p>通过执行 build 命令，生成构建好的静态 dist 文件，存放在 .vitepress/dist 下面</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>yarn docs:build</span></span></code></pre></div><h3 id="_8、部署到-github" tabindex="-1">8、部署到 Github <a class="header-anchor" href="#_8、部署到-github" aria-label="Permalink to &quot;8、部署到 Github&quot;">​</a></h3><p><code>gh-pages</code> 是一个用于 GitHub 项目的分支，通常用于托管静态网站内容。当你在该分支上推送静态网页文件时，GitHub 会自动为你分配一个网址，用于展示你的网站。</p><p>本文采用 Github gh-pages 部署个人博客网站</p><p>1）安装 <code>gh-pages</code> 依赖</p><p>在您的项目中，安装 <code>gh-pages</code> 包，它可以帮助您将构建的静态 dist 文件推送到 <code>gh-pages</code> 分支</p><p>在 <code>package.json</code> 中添加一个脚本，当执行 <code>yarn depoly</code> 命令时，将上面构建的 dist 文件推送到 <code>gh-pages</code> 分支</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;deploy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gh-pages -d dist&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>2）部署到 Github gh-pages 分支</p><p>运行部署脚本，这将自动将 <code>dist</code> 目录（或您在 VitePress 配置中指定的其他输出目录）中的文件推送到 <code>gh-pages</code> 分支</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn deploy</span></span></code></pre></div><p>3）配置 GitHub Pages</p><p>在 GitHub 仓库的设置（Settings）中，找到 “GitHub Pages” 部分。 在“Source”下拉菜单中选择 <code>gh-pages</code> 分支</p><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20240330232655.png" alt=""></p><h3 id="_9、访问网站" tabindex="-1">9、访问网站 <a class="header-anchor" href="#_9、访问网站" aria-label="Permalink to &quot;9、访问网站&quot;">​</a></h3><p>静态文件推送到 gh-pages 分支后，您的 VitePress 网站应该可以通过 <code>username.github.io</code> 访问了，其中 <code>username</code> 是您的 GitHub 用户名</p><p>如果博客仓库名字为 username.github.io，则可以通过 <a href="https://username.github.io" target="_blank" rel="noreferrer">https://username.github.io</a> 访问 如果博客仓库名字为 repository，则可以通过 <a href="https://username.github.io/repository" target="_blank" rel="noreferrer">https://username.github.io/repository</a> 访问</p><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20240517230104.png" alt=""></p><h1 id="三、自动更新" tabindex="-1">三、自动更新 <a class="header-anchor" href="#三、自动更新" aria-label="Permalink to &quot;三、自动更新&quot;">​</a></h1><p>看到这里，你应该知道了，如果笔记文档发送变化，需要在博客仓库下手动更新的，下面分享一种通过 Github Actions 的方法实现子仓库笔记更新时，自动更新博客网站</p><h3 id="_1、子项目添加-actions" tabindex="-1">1、子项目添加 Actions <a class="header-anchor" href="#_1、子项目添加-actions" aria-label="Permalink to &quot;1、子项目添加 Actions&quot;">​</a></h3><p>前往子项目 Github 仓库地址，添加 Actions，实现子项目 markdown 文档更新时，同步推送更新到父项目</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>name: Send submodule updates to parent repo</span></span>
<span class="line"><span></span></span>
<span class="line"><span>on:</span></span>
<span class="line"><span>  workflow_dispatch:</span></span>
<span class="line"><span>  push:</span></span>
<span class="line"><span>    branches: </span></span>
<span class="line"><span>      - main</span></span>
<span class="line"><span></span></span>
<span class="line"><span>jobs:</span></span>
<span class="line"><span>  update:</span></span>
<span class="line"><span>    runs-on: ubuntu-latest</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    steps:</span></span>
<span class="line"><span>      - uses: actions/checkout@v3</span></span>
<span class="line"><span>        with: </span></span>
<span class="line"><span>          repository: muchuang1024/muchuang1024.github.io</span></span>
<span class="line"><span>          token: \${{ secrets.PRIVATE_TOKEN_GITHUB }}</span></span>
<span class="line"><span>          submodules: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      - name: Pull &amp; update submodules recursively</span></span>
<span class="line"><span>        run: |</span></span>
<span class="line"><span>          git submodule update --init --recursive</span></span>
<span class="line"><span>          git submodule update --recursive --remote</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      - name: Commit</span></span>
<span class="line"><span>        run: |</span></span>
<span class="line"><span>          git config user.email &quot;actions@github.com&quot;</span></span>
<span class="line"><span>          git config user.name &quot;GitHub Actions - update submodules&quot;</span></span>
<span class="line"><span>          git add --all</span></span>
<span class="line"><span>          git commit -m &quot;Update submodules&quot; || echo &quot;No changes to commit&quot;</span></span>
<span class="line"><span>          git push</span></span></code></pre></div><p>上面的配置中，需要用到 PRIVATE_TOKEN_GITHUB，这样 Actions 才能推送代码到 Github 仓库</p><p>那如何设置 PRIVATE_TOKEN_GITHUB 呢？</p><p>1）前往个人中心 <a href="https://github.com/settings/tokens" target="_blank" rel="noreferrer">https://github.com/settings/tokens</a> 创建 accees_token</p><p>2）前往子项目 <a href="https://github.com/muchuang1024/docs/settings/secrets/actions/new" target="_blank" rel="noreferrer">https://github.com/muchuang1024/docs/settings/secrets/actions/new</a> 添加PRIVATE_TOKEN_GITHUB，对应的值为上一步创建的 accees_token</p><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20240517233652.png" alt=""></p><p>运行上面的 Actions，没有报错则代表正常</p><h3 id="_2、父项目添加-actions" tabindex="-1">2、父项目添加 Actions <a class="header-anchor" href="#_2、父项目添加-actions" aria-label="Permalink to &quot;2、父项目添加 Actions&quot;">​</a></h3><p>前往父项目 Github 仓库地址，添加 Actions，父项目代码更新后，立即更新 Vitepress 站点</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>name: Deploy to GitHub Pages</span></span>
<span class="line"><span></span></span>
<span class="line"><span>on:</span></span>
<span class="line"><span>  push:</span></span>
<span class="line"><span>    branches:</span></span>
<span class="line"><span>      - main</span></span>
<span class="line"><span></span></span>
<span class="line"><span>jobs:</span></span>
<span class="line"><span>  deploy:</span></span>
<span class="line"><span>    runs-on: ubuntu-latest</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    steps:</span></span>
<span class="line"><span>      - uses: actions/checkout@v3</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          fetch-depth: 0</span></span>
<span class="line"><span>	  - uses: pnpm/action-setup@v2</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          version: 7.26.3</span></span>
<span class="line"><span>      - uses: actions/setup-node@v3</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          node-version: 16</span></span>
<span class="line"><span>          cache: pnpm</span></span>
<span class="line"><span>      - name: Install dependencies</span></span>
<span class="line"><span>        run: pnpm install</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      - name: Build the documentation</span></span>
<span class="line"><span>        run: pnpm run docs:build</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      - name: Deploy to GitHub Pages</span></span>
<span class="line"><span>        uses: peaceiris/actions-gh-pages@v3</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          github_token: \${{ secrets.PRIVATE_TOKEN_GITHUB }}</span></span>
<span class="line"><span>          publish_dir: .vitepress/dist</span></span>
<span class="line"><span>          ref: gh-pages</span></span></code></pre></div><p>前往父项目添加 PRIVATE_TOKEN_GITHUB secret</p><p>运行上面的 Actions，没有报错则代表正常</p><h2 id="四、总结" tabindex="-1">四、总结 <a class="header-anchor" href="#四、总结" aria-label="Permalink to &quot;四、总结&quot;">​</a></h2><p>本文主要介绍如何使用 VitePress 搭建个人博客，并部署到 Github 上，以及如何实现笔记文档更新时自动更新博客网站。</p><p>文章分为以下三个部分：</p><p>1、<strong>为什么搭建个人博客</strong>：分析了在自媒体平台上创作的局限性，强调了博客在搜索引擎优化、个人品牌建立方面的优势。</p><p>2、<strong>为什么选择VitePress</strong>：指出 VitePress 作为静态站点生成器的优势，包括简化写作流程、基于Markdown 编写内容、易于部署到 Github 等。</p><p>3、 <strong>搭建和部署过程</strong>：详细介绍了创建笔记仓库、创建博客仓库、安装 VitePress 依赖、构建项目、添加笔记文档、配置 VitePress、自动生成侧边栏、本地运行、部署到 Github、配置 GitHub Pages、访问网站等步骤。</p><p>文章还提供了自动更新博客网站的解决方案，通过 Github Actions实现子仓库笔记更新时，自动同步推送更新到父项目，并部署到 VitePress 站点</p>`,96),t=[e];function l(h,k,c,r,d,o){return i(),a("div",null,t)}const u=s(p,[["render",l]]);export{E as __pageData,u as default};
