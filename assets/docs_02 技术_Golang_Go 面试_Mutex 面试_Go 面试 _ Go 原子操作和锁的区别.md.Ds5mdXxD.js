import{_ as t,c as o,o as d,a4 as _}from"./chunks/framework.4aTu-Nia.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/02 技术/Golang/Go 面试/Mutex 面试/Go 面试 | Go 原子操作和锁的区别.md","filePath":"docs/02 技术/Golang/Go 面试/Mutex 面试/Go 面试 | Go 原子操作和锁的区别.md"}'),r={name:"docs/02 技术/Golang/Go 面试/Mutex 面试/Go 面试 | Go 原子操作和锁的区别.md"},e=_("<table><thead><tr><th>特性</th><th>原子操作</th><th>锁</th></tr></thead><tbody><tr><td><strong>底层实现</strong></td><td>由底层硬件直接支持</td><td>基于原子操作和信号量实现</td></tr><tr><td><strong>性能</strong></td><td>通常更高效，因为它是单个指令的执行</td><td>相对较低，涉及到上下文切换</td></tr><tr><td><strong>适用场景</strong></td><td>单个指令的互斥操作</td><td>处理临界区（多个指令）的互斥操作，扩大操作范围</td></tr><tr><td><strong>锁类型</strong></td><td>无锁操作，属于乐观锁</td><td>通常属于悲观锁</td></tr><tr><td><strong>层级存在</strong></td><td>存在于机器指令层、汇编指令层、高级语言层（如 Go 语言）</td><td>同样存在于不同指令和语言层级</td></tr></tbody></table>",1),s=[e];function a(n,c,G,g,h,l){return d(),o("div",null,s)}const m=t(r,[["render",a]]);export{p as __pageData,m as default};
