import{_ as a,c as e,o as t,a4 as o}from"./chunks/framework.4aTu-Nia.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/00 创作中/列生成算法.md","filePath":"docs/00 创作中/列生成算法.md"}'),r={name:"docs/00 创作中/列生成算法.md"},n=o('<h2 id="算法流程图" tabindex="-1">算法流程图 <a class="header-anchor" href="#算法流程图" aria-label="Permalink to &quot;算法流程图&quot;">​</a></h2><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20241205223002.png" alt=""></p><h2 id="改进方式" tabindex="-1">改进方式 <a class="header-anchor" href="#改进方式" aria-label="Permalink to &quot;改进方式&quot;">​</a></h2><ul><li>采取大规模邻域搜索进行初始路径生成模块，且可异步并行化寻优，为列生成核心模块提供初始寻优较好的初始方向</li><li>传统列生成算法的子问题无并行且一般采取单个子问题计算，本文采取并行化&amp;多子问题算法交叉搜索的方式，可充分释放子问题搜索的多样性/空间，能够进一步提高框架的最优性。</li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><p><a href="https://www.cnblogs.com/dengfaheng/p/11249879.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/dengfaheng/p/11249879.html</a></p>',6),s=[n];function c(l,i,_,h,d,p){return t(),e("div",null,s)}const f=a(r,[["render",c]]);export{u as __pageData,f as default};
