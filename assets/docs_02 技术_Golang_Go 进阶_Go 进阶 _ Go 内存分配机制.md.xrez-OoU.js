import{_ as a,c as s,o as n,a4 as p}from"./chunks/framework.4aTu-Nia.js";const g=JSON.parse('{"title":"一、设计思想","description":"","frontmatter":{},"headers":[],"relativePath":"docs/02 技术/Golang/Go 进阶/Go 进阶 | Go 内存分配机制.md","filePath":"docs/02 技术/Golang/Go 进阶/Go 进阶 | Go 内存分配机制.md"}'),e={name:"docs/02 技术/Golang/Go 进阶/Go 进阶 | Go 内存分配机制.md"},t=p(`<p>Go 语言内置运行时（就是 runtime），抛弃了传统的内存分配方式，改为自主管理。这样可以自主地实现更好的内存使用模式，比如内存池、预分配等等。这样，不会每次内存分配都需要进行系统调用。</p><p>内存空间分为栈和堆，以下是栈内存和堆内存分配的区别：</p><table><thead><tr><th>特性</th><th>栈内存分配</th><th>堆内存分配</th></tr></thead><tbody><tr><td>管理</td><td>由编译器和运行时自动管理。</td><td>主要由垃圾回收器管理。</td></tr><tr><td>分配速度</td><td>非常快。栈操作仅为移动栈指针。</td><td>相对慢，需要更复杂的内存管理和垃圾回收过程。</td></tr><tr><td>生命周期</td><td>局部，随函数调用。当函数返回时，栈内存被释放。</td><td>动态，由程序的运行流程和垃圾回收策略决定。</td></tr><tr><td>内存大小</td><td>有限且固定，但 Go 的栈可以动态扩展。</td><td>理论上受限于系统的可用内存。</td></tr><tr><td>分配方式</td><td>自动。</td><td>需要显式分配（如使用<code>new</code>或<code>make</code>关键字）。</td></tr><tr><td>数据类型</td><td>主要用于存储局部变量和函数参数。</td><td>用于存储生命周期长或大小大的数据结构。</td></tr><tr><td>访问效率</td><td>通常比堆内存访问更快。</td><td>可能因为内存分散或垃圾回收影响而稍慢。</td></tr><tr><td>内存安全</td><td>较高。自动管理降低了内存泄漏风险。</td><td>需要依赖垃圾回收器来防止内存泄漏。</td></tr><tr><td>适用场景</td><td>适合于临时数据和小对象。</td><td>适合于生命周期长或需要共享的大型数据结构。</td></tr><tr><td>动态调整</td><td>栈的大小可以动态调整，但有限制。</td><td>堆的大小更加灵活，可以扩展到几乎整个程序的内存。</td></tr></tbody></table><p>下面重点介绍下 Go 语言中管理堆内存分配的分配算法：TCMalloc 算法</p><h1 id="一、设计思想" tabindex="-1">一、设计思想 <a class="header-anchor" href="#一、设计思想" aria-label="Permalink to &quot;一、设计思想&quot;">​</a></h1><p>1、内存分配算法采用 Google 的<code>TCMalloc算法</code>，每个线程都会自行维护一个独立的内存池，进行内存分配时优先从该内存池中分配，当内存池不足时才会向加锁向全局内存池申请，减少系统调用并且避免不同线程对全局内存池的锁竞争</p><p>2、把内存规格切分的比较细，分级管理，以降低锁的粒度</p><p>3、回收对象内存时，并没有将其真正释放掉，只是放回预先分配的大块内存中，以便复用。只有内存闲置过多的时候，才会尝试归还部分内存给操作系统，降低整体开销</p><h1 id="二、分配组件" tabindex="-1">二、分配组件 <a class="header-anchor" href="#二、分配组件" aria-label="Permalink to &quot;二、分配组件&quot;">​</a></h1><p>Go 的内存管理组件主要有：<code>mspan</code>、<code>mcache</code>、<code>mcentral</code> 和 <code>mheap</code></p><p><img src="https://cdn.jsdelivr.net/gh/caijinlin/imgcdn/image-20220501185553347.png#id=WzSrJ&amp;originHeight=897&amp;originWidth=852&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h2 id="内存管理单元-mspan" tabindex="-1">内存管理单元 mspan <a class="header-anchor" href="#内存管理单元-mspan" aria-label="Permalink to &quot;内存管理单元 mspan&quot;">​</a></h2><p><code>mspan</code>是 内存管理的基本单元，该结构体中包含 <code>next</code> 和 <code>prev</code> 两个字段，它们分别指向了前一个和后一个 mspan，每个<code>mspan</code> 都管理 <code>npages</code> 个大小为 8KB 的 page，一个 span 是由多个 page 组成的，这里的页不是操作系统中的内存页，它们是操作系统内存页的整数倍。<code>page</code>是内存存储的基本单元，“对象”放到<code>page</code>中</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type mspan struct {</span></span>
<span class="line"><span>	next *mspan // 后指针</span></span>
<span class="line"><span>	prev *mspan // 前指针</span></span>
<span class="line"><span>	startAddr uintptr // 管理页的起始地址，指向page</span></span>
<span class="line"><span>	npages    uintptr // 页数</span></span>
<span class="line"><span>	spanclass   spanClass // 规格</span></span>
<span class="line"><span>	...</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>type spanClass uint8</span></span></code></pre></div><p>Go 有 68 种不同大小的 spanClass，用于小对象的分配</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const _NumSizeClasses = 68</span></span>
<span class="line"><span>var class_to_size = [_NumSizeClasses]uint16{0, 8, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256, 288, 320, 352, 384, 416, 448, 480, 512, 576, 640, 704, 768, 896, 1024, 1152, 1280, 1408, 1536,1792, 2048, 2304, 2688, 3072, 3200, 3456, 4096, 4864, 5376, 6144, 6528, 6784, 6912, 8192, 9472, 9728, 10240, 10880, 12288, 13568, 14336, 16384, 18432, 19072, 20480, 21760, 24576, 27264, 28672, 32768}</span></span></code></pre></div><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12455685/1697030001149-9729ae12-5357-49d1-a982-86c9454fd300.png#averageHue=%23f4f5f5&amp;clientId=u36622caa-a3b0-4&amp;id=hvxug&amp;originHeight=892&amp;originWidth=1050&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=111762&amp;status=done&amp;style=none&amp;taskId=u1412f580-4fac-4139-b189-d5c9b1aaad8&amp;title=" alt=""></p><p>1、如果按照序号为 1 的 spanClass（对象规格为 8B）分配，每个 span 占用堆的字节数：8k，mspan 可以保存 1024 个对象</p><p>2、如果按照序号为 2 的 spanClass（对象规格为 16B）分配，每个 span 占用堆的字节数：8k，mspan 可以保存 512 个对象</p><p>3、如果按照序号为 67 的 spanClass（对象规格为 32K）分配，每个 span 占用堆的字节数：32k，mspan 可以保存 1 个对象</p><p>字段含义：</p><ul><li>class： class ID，每个 span 结构中都有一个 class ID, 表示该 span 可处理的对象类型</li><li>bytes/obj：该 class 代表对象的字节数</li><li>bytes/span：每个 span 占用堆的字节数，也即页数*页大小</li><li>objects: 每个 span 可分配的对象个数，也即（bytes/spans）/（bytes/obj）</li><li>waste bytes: 每个 span 产生的内存碎片，也即（bytes/spans）%（bytes/obj）</li></ul><p>大于 32k 的对象出现时，会直接从 heap 分配一个特殊的 span，这个特殊的 span 的类型(class)是 0, 只包含了一个大对象</p><h2 id="线程缓存-mcache" tabindex="-1">线程缓存 mcache <a class="header-anchor" href="#线程缓存-mcache" aria-label="Permalink to &quot;线程缓存 mcache&quot;">​</a></h2><p>mcache 管理线程在本地缓存的 mspan，每个 goroutine 绑定的 P 都有一个<code>mcache</code>字段</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type mcache struct {</span></span>
<span class="line"><span>    alloc [numSpanClasses]*mspan</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>_NumSizeClasses = 68</span></span>
<span class="line"><span>numSpanClasses = _NumSizeClasses &lt;&lt; 1</span></span></code></pre></div><p>mcache 用 Span Classes 作为索引管理多个用于分配的 mspan，它包含所有规格的 mspan。它是_NumSizeClasses 的 2 倍，也就是 68<em>2=136，其中</em>2 是将 spanClass 分成了有指针和没有指针两种, 方便与垃圾回收。</p><p>对于每种规格，有 2 个 mspan，一个 mspan 不包含指针，另一个 mspan 则包含指针。对于无指针对象的 mspan 在进行垃圾回收的时候无需进一步扫描它是否引用了其他活跃的对象。</p><p>mcache 在初始化的时候是没有任何 mspan 资源的，在使用过程中会动态地从 mcentral 申请，之后会缓存下来。当对象小于等于 32KB 大小时，使用 mcache 的相应规格的 mspan 进行分配。</p><h2 id="中心缓存-mcentral" tabindex="-1">中心缓存 mcentral <a class="header-anchor" href="#中心缓存-mcentral" aria-label="Permalink to &quot;中心缓存 mcentral&quot;">​</a></h2><p>mcentral 管理全局的 mspan 供所有线程使用，全局 mheap 变量包含 central 字段，每个 mcentral 结构都维护在<strong>mheap</strong>结构内</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type mcentral struct {</span></span>
<span class="line"><span>	spanclass spanClass // 指当前规格大小</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	partial [2]spanSet // 有空闲object的mspan列表</span></span>
<span class="line"><span>	full    [2]spanSet // 没有空闲object的mspan列表</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>每个 mcentral 管理一种 spanClass 的 mspan，并将有空闲空间和没有空闲空间的 mspan 分开管理。partial 和 full<code>的数据类型为</code>spanSet，表示 <code>mspans</code>集，可以通过 pop、push 来获得 mspans</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type spanSet struct {</span></span>
<span class="line"><span>    spineLock mutex</span></span>
<span class="line"><span>    spine     unsafe.Pointer // 指向[]span的指针</span></span>
<span class="line"><span>    spineLen  uintptr        // Spine array length, accessed atomically</span></span>
<span class="line"><span>    spineCap  uintptr        // Spine array cap, accessed under lock</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    index headTailIndex  // 前32位是头指针，后32位是尾指针</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>简单说下<code>mcache</code>从<code>mcentral</code>获取和归还<code>mspan</code>的流程：</p><p>1、获取； 加锁，从<code>partial</code>链表找到一个可用的<code>mspan</code>；并将其从<code>partial</code>链表删除；将取出的<code>mspan</code>加入到<code>full</code>链表；将<code>mspan</code>返回给工作线程，解锁。</p><p>2、归还； 加锁，将<code>mspan</code>从<code>full</code>链表删除；将<code>mspan</code>加入到<code>partial</code>链表，解锁。</p><h2 id="页堆-mheap" tabindex="-1">页堆 mheap <a class="header-anchor" href="#页堆-mheap" aria-label="Permalink to &quot;页堆 mheap&quot;">​</a></h2><p>mheap 管理 Go 的所有动态分配内存，可以认为是 Go 程序持有的整个堆空间，全局唯一</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var mheap_ mheap</span></span>
<span class="line"><span>type mheap struct {</span></span>
<span class="line"><span>    lock      mutex    // 全局锁</span></span>
<span class="line"><span>    pages     pageAlloc // 页面分配的数据结构</span></span>
<span class="line"><span>    allspans []*mspan // 所有通过 mheap_ 申请的mspans</span></span>
<span class="line"><span>		// 堆</span></span>
<span class="line"><span>    arenas [1 &lt;&lt; arenaL1Bits]*[1 &lt;&lt; arenaL2Bits]*heapArena</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		// 所有中心缓存mcentral</span></span>
<span class="line"><span>    central [numSpanClasses]struct {</span></span>
<span class="line"><span>        mcentral mcentral</span></span>
<span class="line"><span>        pad      [cpu.CacheLinePadSize - unsafe.Sizeof(mcentral{})%cpu.CacheLinePadSize]byte</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>所有<code>mcentral</code>的集合则是存放于<code>mheap</code>中的。<code>mheap</code>里的<code>arena</code> 区域是堆内存的抽象，运行时会将 <code>8KB</code> 看做一页，这些内存页中存储了所有在堆上初始化的对象。运行时使用二维的 runtime.heapArena 数组管理所有的内存，每个 runtime.heapArena 都会管理 64MB 的内存。</p><p>当申请内存时，依次经过 <code>mcache</code> 和 <code>mcentral</code> 都没有可用合适规格的大小内存，这时候会向 <code>mheap</code> 申请一块内存。然后按指定规格划分为一些列表，并将其添加到相同规格大小的 <code>mcentral</code> 的 <code>非空闲列表</code> 后面</p><h1 id="三、分配流程" tabindex="-1">三、分配流程 <a class="header-anchor" href="#三、分配流程" aria-label="Permalink to &quot;三、分配流程&quot;">​</a></h1><p>1、小对象 [0, 32KB]：依次尝试线程缓存、中心缓存、堆 分配内存</p><p>2、大对象 (32KB, +∞)：直接尝试堆分配内存</p><p>3、发生内存逃逸的对象：直接尝试堆分配内存</p><p>具体介绍下小对象的分配流程：</p><p>1、首先通过计算使用的大小规格</p><p>2、然后使用线程缓存<code>mcache</code>中对应大小规格的块分配。</p><p>3、如果中心缓存<code>mcentral</code>中没有可用的块，则向堆<code>mheap</code>申请，并根据算法找到最合适的<code>mspan</code>。</p><p>4、如果申请到的<code>mspan</code> 超出申请大小，将会根据需求进行切分，以返回用户所需的页数。剩余的页构成一个新的 mspan 放回 mheap 的空闲列表。</p><p>5、如果 mheap 中没有可用 span，则向操作系统申请一系列新的页（最小 1MB）</p><p><img src="https://cdn.jsdelivr.net/gh/caijinlin/imgcdn/image-20220501185248901.png#id=uUDls&amp;originHeight=261&amp;originWidth=1422&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p>`,53),c=[t];function l(d,o,i,r,m,h){return n(),s("div",null,c)}const b=a(e,[["render",l]]);export{g as __pageData,b as default};
