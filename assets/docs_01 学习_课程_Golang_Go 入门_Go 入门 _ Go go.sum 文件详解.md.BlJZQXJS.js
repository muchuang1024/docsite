import{_ as o,c as e,o as s,a4 as a}from"./chunks/framework.4aTu-Nia.js";const h=JSON.parse('{"title":"一、go.sum 文件结构","description":"","frontmatter":{},"headers":[],"relativePath":"docs/01 学习/课程/Golang/Go 入门/Go 入门 | Go go.sum 文件详解.md","filePath":"docs/01 学习/课程/Golang/Go 入门/Go 入门 | Go go.sum 文件详解.md"}'),t={name:"docs/01 学习/课程/Golang/Go 入门/Go 入门 | Go go.sum 文件详解.md"},d=a(`<p>go.sum 文件用于存储模块的哈希校验和，以确保依赖关系的安全性和一致性。它通过为项目中的每个依赖项记录加密哈希值，帮助验证所下载的依赖项是否未被篡改且与预期版本一致，一旦被篡改需要手动解决冲突。</p><p>1、<strong>安全性</strong>: 如果有人尝试更改模块仓库中的代码，<code>go.sum</code> 会帮助检测到这些更改，因为哈希值将不再匹配。</p><p>2、<strong>一致性</strong>: 不同开发者和环境之间构建项目时，<code>go.sum</code> 确保每个人都使用相同的依赖版本。</p><h1 id="一、go-sum-文件结构" tabindex="-1">一、go.sum 文件结构 <a class="header-anchor" href="#一、go-sum-文件结构" aria-label="Permalink to &quot;一、go.sum 文件结构&quot;">​</a></h1><p><code>go.sum</code> 文件包含一系列的行，每行对应一个依赖项的特定版本，格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;module-path&gt; &lt;version&gt; &lt;hash-type&gt;:&lt;hash-value&gt;</span></span></code></pre></div><p>其中：</p><ul><li><code>&lt;module-path&gt;</code>: 依赖的模块路径。</li><li><code>&lt;version&gt;</code>: 依赖的具体版本。</li><li><code>&lt;hash-type&gt;:&lt;hash-value&gt;</code>: 哈希类型（通常是 <code>h1</code>）和对应的哈希值。</li></ul><p>示例：</p><p><code>go.sum</code> 文件示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>github.com/example/module v0.1.0 h1:Ne3bPgEOIvuSxQjflWJlD1tgnY/5MWz5/SZ3d4ZzjFw=</span></span>
<span class="line"><span>github.com/example/module v0.1.0/go.mod h1:dh1SgE4H6r2jF6/5m0cPT5e3nsz/RpB2dl7p8Zj9JVE=</span></span>
<span class="line"><span>...</span></span></code></pre></div><h1 id="二、go-sum-文件初始化" tabindex="-1">二、go.sum 文件初始化 <a class="header-anchor" href="#二、go-sum-文件初始化" aria-label="Permalink to &quot;二、go.sum 文件初始化&quot;">​</a></h1><p>1、<strong>初始化新的模块</strong>：当你使用 <code>go mod init &lt;module-name&gt;</code> 命令初始化一个新的 Go 模块时，如果该项目有依赖，<code>go.mod</code> 和 <code>go.sum</code> 文件将会被创建。此时 <code>go.sum</code> 包含这些初始依赖的哈希值。</p><p>2、<strong>第一次添加依赖</strong>：如果你在已有的 Go 模块中首次使用 <code>go get</code> 添加依赖，Go 工具会自动创建 <code>go.sum</code> 文件并添加相关依赖的哈希值。</p><h1 id="三、go-sum-文件修改" tabindex="-1">三、go.sum 文件修改 <a class="header-anchor" href="#三、go-sum-文件修改" aria-label="Permalink to &quot;三、go.sum 文件修改&quot;">​</a></h1><p>1、<strong>添加或更新依赖</strong>：当你使用 <code>go get</code> 添加或更新模块的依赖项时，Go 工具会自动更新 <code>go.sum</code> 文件，以包含新依赖项或更新的依赖项的哈希值。</p><p>2、<strong>构建项目</strong>：在构建项目（例如使用 <code>go build</code> 或 <code>go test</code>）时，如果发现 <code>go.sum</code> 文件中缺少必需的哈希值，Go 工具会计算这些哈希值并更新文件。</p><p>3、<strong>运行 <code>go mod tidy</code></strong>：此命令不仅清理 <code>go.mod</code> 文件中不需要的依赖项，还会更新 <code>go.sum</code> 文件以确保其反映当前所有使用和测试的依赖项的哈希值。</p><h1 id="四、解决-go-sum-不一致" tabindex="-1">四、解决 go.sum 不一致 <a class="header-anchor" href="#四、解决-go-sum-不一致" aria-label="Permalink to &quot;四、解决 go.sum 不一致&quot;">​</a></h1><p>当执行 Go 命令（如 go build、go test、go mod 等），发现 go.sum 文件中的哈希值与下载的依赖项的哈希值不一致时，会显示一个错误信息</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>verifying github.com/example/module@v1.0.0: checksum mismatch</span></span>
<span class="line"><span>    downloaded: h1:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></span>
<span class="line"><span>    go.sum:     h1:yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy</span></span></code></pre></div><p>可以采取以下步骤解决：</p><p>1、清理缓存：运行 go clean -modcache 清理本地的模块缓存，然后重新下载依赖。</p><p>2、重新生成 go.sum：删除 go.sum 文件并通过运行 go mod tidy 或 go build 重新生成。</p><p>3、版本控制回退：如果上述步骤不奏效，可以考虑使用版本控制系统回退到之前的稳定状态。</p><h1 id="五、注意事项" tabindex="-1">五、注意事项 <a class="header-anchor" href="#五、注意事项" aria-label="Permalink to &quot;五、注意事项&quot;">​</a></h1><p>1、<strong>自动管理</strong>：通常你不需要手动编辑 <code>go.sum</code> 文件。它是由 Go 的包管理工具自动管理和更新的。</p><p>2、<strong>版本控制</strong>：<code>go.sum</code> 文件应该被包含在版本控制中，以确保所有团队成员和构建环境使用相同的依赖哈希值，保证构建的一致性和安全性。</p><p>通过这些自动化的机制，<code>go.sum</code> 文件确保了 Go 项目依赖的完整性和一致性，帮助开发者防止意外或恶意修改依赖项的风险。</p>`,29),c=[d];function n(p,g,l,i,u,m){return s(),e("div",null,c)}const x=o(t,[["render",n]]);export{h as __pageData,x as default};
