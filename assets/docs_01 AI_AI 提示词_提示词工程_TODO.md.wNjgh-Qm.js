import{_ as t,c as o,o as s,a4 as r}from"./chunks/framework.4aTu-Nia.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/01 AI/AI 提示词/提示词工程/TODO.md","filePath":"docs/01 AI/AI 提示词/提示词工程/TODO.md"}'),e={name:"docs/01 AI/AI 提示词/提示词工程/TODO.md"},p=r("<ul><li><strong>局限性</strong>：分析当前提示词生成技术和模型的限制。</li><li><strong>常见误区</strong>：探讨生成提示词时常见的问题和误区。</li><li><strong>最佳实践</strong>：描述在提示词生成过程中被广泛认可的有效方法和策略。</li><li><strong>优化策略</strong>：提供具体的技术和方法，帮助优化提示词生成的质量和效果，包括如何更好地理解上下文、个性化定制、避免偏见以及提高生成内容的关联性。</li></ul><p>1、局限性（缺点) 2、常见误区（错误做法） 3、最佳实践（正确做法） 4、优化策略（优化生成的提示词的质量)</p><p>Prompt工程入门核心知识点：</p><p>•掌握Prompt的基本格式：指令、背景、输入、输出等 •学习Prompt的设计原则：明确、具体、简洁、可操作 •了解Prompt的评估维度：相关性、准确性、流畅性、创造性等 •体验角色扮演、任务分解等高阶Prompt设计技巧</p><p>使用AI进行任务拆解关键步骤 明确任务的关键信息 给模型提供少样本示例来准确理解我们的意图，生成和预期相符的内容 人设角色扮演</p><p>请用奶奶都能听懂的语言帮我解释下 xgboost 原理</p><p>使用角色、背景、输出格式、输出要求 改造下面的提示词： --- 输出AI智能体直播分享内容教案 ---</p>",7),_=[p];function n(a,c,i,l,d,m){return s(),o("div",null,_)}const I=t(e,[["render",n]]);export{g as __pageData,I as default};
