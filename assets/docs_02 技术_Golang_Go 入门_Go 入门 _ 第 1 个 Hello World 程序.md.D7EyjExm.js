import{_ as o,c as e,o as t,a4 as l}from"./chunks/framework.4aTu-Nia.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/02 技术/Golang/Go 入门/Go 入门 | 第 1 个 Hello World 程序.md","filePath":"docs/02 技术/Golang/Go 入门/Go 入门 | 第 1 个 Hello World 程序.md"}'),d={name:"docs/02 技术/Golang/Go 入门/Go 入门 | 第 1 个 Hello World 程序.md"},c=l("<p>当你学习一门新编程语言时，编写一个&quot;Hello, World!&quot;程序是一个很好的起点。以下是一个简单的 Go &quot;Hello World&quot; 程序</p><p>在 GOPATH 目录新建一个项目，然后新建一个 main.go 文件，执行 go run main.go</p><ol><li><p><code>package main</code>：这是程序的包声明。在 Go 中，每个程序都必须属于一个包，而 <code>main</code> 包是一个特殊的包，用于标识可执行程序的入口点。</p></li><li><p><code>import &quot;fmt&quot;</code>：这里使用了 <code>import</code> 关键字导入了一个名为 &quot;fmt&quot; 的包。<code>fmt</code> 包包含了格式化输入和输出的函数，我们将使用它来输出 &quot;Hello, World!&quot;。</p></li><li><p><code>func main()</code>：这是程序的入口函数。在 Go 中，所有可执行程序的入口点都必须是 <code>main</code> 函数。程序从 <code>main</code> 函数开始执行。</p></li><li><p><code>fmt.Println(&quot;Hello, World!&quot;)</code>：这是在 <code>main</code> 函数中的一行代码。它使用了 标准库 <code>fmt</code> 中的 <code>Println</code> 函数，将字符串 &quot;Hello, World!&quot; 输出到标准输出（通常是终端或命令行窗口）。<code>fmt.Println</code> 用于在控制台上打印一行文本。</p></li></ol><p>当你运行这个程序，它将输出 &quot;Hello, World!&quot;</p>",4),_=[c];function a(n,r,i,p,m,s){return t(),e("div",null,_)}const f=o(d,[["render",a]]);export{q as __pageData,f as default};
